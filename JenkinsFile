def env='dev'
def app_name='snowflake'
def repo_name='SnowflakeBoT'
def snowsql_config="/home/ubuntu/.snowsql/config"

def branch_name='main'
def code_repo_name='https://github.com/KaveenRaajanV/Snowflake_BoT.git' // SSH Repository of deploy repo //
def admin_repo='https://github.com/KaveenRaajanV/Snowflake_BoT_admin.git' //Admin Ansible repo here //

def jenkins_host="http://ec2-18-218-55-90.us-east-2.compute.amazonaws.com:8080/" 
def git_creds="kaveen_git"// GitHub credentials- Change ID as per Jenkins server https://jenkins_url/credentials/ //

def GIT_COMMIT // NO ACTION REQUIRED : For Git Commit ID assignment //

// Declarative Pipeline starts here //
pipeline {
    agent any
    // Stages begins here //
    stages {
        
        // Stage for Git Branches Checkout //
        stage('Checkout Git Branch') {
           steps{
           
             git branch: "${branch_name}",
             url: "${code_repo_name}"
                    
             // Create Ansible admin directory and do a checkout from master //
             dir('Snowflake_BoT_admin') {
             checkout([$class: 'GitSCM', 
             branches: [[name: '*/main']], 
             extensions: [], 
             userRemoteConfigs: [[url: "${admin_repo}"]]]) 
             }
            }
        }
            
        // Stage to deploy the files to destination server //
        stage('Deploy'){
            steps {
                script {
                
                sh('''snowsql --dbname 'sf_bot' --schemaname 'test1' --config  '''+"${snowsql_config}"+''' -q 'select * from Agents' --connection sf_conn  2>&1''')
                FILES_CHANGED= sh(script: "set +x && git log -m -1 --name-only --diff-filter=ACM --pretty='format:' `git rev-parse HEAD` | sort -u | grep -i '.sql\$' > ${WORKSPACE}/committed_files.txt")
                sh("set +x && echo 'DEPLOYBEGIN' && echo '******Deploying from release/${env} Branch to ${app_name} ${env} Environment******'")
                sh("cat ${WORKSPACE}/committed_files.txt")
				
				sh('''
                set +x     
                echo "" > snow_sql_output.log
                echo "" > status
                git show --pretty=fuller ${GIT_COMMIT} | head -n 10 | tr -d '[:blank:]' | sed 's/commit/CommitID:/' | sed 's/</{/' | sed 's/>/}/' | sed 's/(//' | sed 's/)//' > git_details.txt     
                COMMIT_ONELINER=`sed s/"'"//g git_details.txt | xargs`
                cat git_details.txt
				''')
		
                }
            }
        }
    }
}
